// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  published Boolean  @default(false)
  authorId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  PostAndUser User @relation(fields: [userId],references: [id])
  categoryId Int
  PostAndCategory Category @relation(fields: [categoryId], references: [id])
}

model User {
  id       Int      @id @default(autoincrement())
  username String
  email    String   @unique
  role     Role
  // Relationship to Profile (a User can have one Profile)
  profile  Profile?
  // Relationship to Post (a User can have many Posts)
  posts    Post[]
}

model Profile {
  id       Int      @id @default(autoincrement())
  bio      String?
  user     User @relation(fields: [userId], references: [id])
  userId   Int      @unique // Foreign key as simple as it is.
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique
  // Relationship to Post (a Category can have many Posts)
  posts Post[]
}

enum Role {
  user
  admin
}

/* 
    model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationship to User
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  
  // Relationship to Category
  category  Category @relation(fields: [categoryId], references: [id])
  categoryId Int
}

model User {
  id       Int     @id @default(autoincrement())
  username String
  email    String  @unique
  role     Role
  
  // Relationship to Post (a User can have many Posts)
  posts    Post[]
  
  // Relationship to Profile (a User has one Profile)
  profile  Profile?
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id])
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  
  // Relationship to Post (a Category can have many Posts)
  posts Post[]
}

enum Role {
  user
  admin
}
 */